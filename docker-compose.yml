# FastAPI Backend
services:

  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d myapp" ]
      interval: 10s
      timeout: 5s
      retries: 5
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:password123!@db:5432/myapp
      DB_HOST: db
      DB_NAME: myapp
      DB_USER: postgres
      DB_PASSWORD: password123!
      SECRET_KEY: your-secret-key-change-in-production
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000,http://localhost:7000
    ports:
      - "7000:7000"
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U postgres -d myapp; do
          echo 'Waiting for database to be ready...'
          sleep 2
        done &&
        python scripts/seed_database.py &&
        uvicorn main:app --host 0.0.0.0 --port 7000 --reload
      "

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:8001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - app-network
    command: npm run dev

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
